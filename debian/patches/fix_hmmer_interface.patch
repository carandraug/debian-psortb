Author: Andreas Tille <tille@debian.org>
Last-Update: Fri, 17 Mar 2017 10:23:15 +010
Description: Enable linking against libhmmer.a as packaged
 in hmmer2 source package

--- a/algorithm-hmm/hmm-binding.cpp
+++ b/algorithm-hmm/hmm-binding.cpp
@@ -71,7 +71,7 @@ int HMM::load(char *filename) {
   if(strlen(filename) == 0) return -1;
 
   // Load the model from the specified file.
-  if((hmmfp = HMMFileOpen(filename, "HMMERDB")) == NULL) return -1;
+  if((hmmfp = HMMFileOpen(filename, (char *)"HMMERDB")) == NULL) return -1;
 
   if(! HMMFileRead(hmmfp, &tmp_model)) {
     HMMFileClose(hmmfp);
@@ -95,25 +95,26 @@ int HMM::load(char *filename) {
 
 HMMReport *HMM::search(char *seq) {
   struct tophit_s *ghit, *dhit;
+  struct dpmatrix_s *mx;
   struct p7trace_s *trace;
   double pvalue, evalue;
   int numhits;
   HMMReport *hmmrep;
   float score;
   int seqlen;
-  char *dseq;
+  unsigned char *dseq;
 
   // Ensure we have a valid model and sequence.
   if((model == NULL) ||(seq == NULL) || (!(seqlen = strlen(seq)))) return NULL;
 
   // Convert the sequence to the format the HMMER library expects.
-  dseq = DigitizeSequence(seq, seqlen);
+  dseq = DigitizeSequence((char *)seq, seqlen);
 
   // Calculate the raw scores for the sequence.
   if (P7ViterbiSize(seqlen, model->M) <= RAMLIMIT)
-    score = P7Viterbi(dseq, seqlen, model, &trace);
+    score = P7Viterbi(dseq, seqlen, model, mx, &trace);
   else
-    score = P7SmallViterbi(dseq, seqlen, model, &trace);
+    score = P7SmallViterbi(dseq, seqlen, model, mx, &trace);
 
 
   // Calculate the score using the forward algorithm if we need.
@@ -241,7 +242,7 @@ void HMM::init(char *filename, int df, i
   thresh.globT   = -FLT_MAX;
   thresh.domT    = -FLT_MAX;
   thresh.domE    = FLT_MAX;
-  thresh.autocut = CUT_NONE;
+  thresh.autocut = threshold_s::CUT_NONE;
   thresh.Z       = 1;
 
   doForward = df;
